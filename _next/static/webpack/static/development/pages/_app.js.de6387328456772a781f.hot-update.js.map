{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.de6387328456772a781f.hot-update.js","sources":["webpack:///./components/Web/MiniDrawer.js"],"sourcesContent":["import clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\n\r\nimport { toolbarStyle } from './styles';\r\n\r\nconst LIST_ITEMS = [\r\n  {\r\n    Icon: () => <FacebookIcon />,\r\n    text: 'screens:socialLinks.title',\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  ...toolbarStyle(theme),\r\n\r\n  drawer: {\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: (props) => ({\r\n    width: props.drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function MiniDrawer(props) {\r\n  const { drawerWidth, open, handleDrawerClose } = props;\r\n  const classes = useStyles({ drawerWidth });\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      className={clsx(classes.drawer, {\r\n        [classes.drawerOpen]: open,\r\n        [classes.drawerClose]: !open,\r\n      })}\r\n      classes={{\r\n        paper: clsx({\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        }),\r\n      }}\r\n    >\r\n      <div className={classes.toolbar}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          {theme.direction === 'rtl' ? (\r\n            <ChevronRightIcon />\r\n          ) : (\r\n            <ChevronLeftIcon />\r\n          )}\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((item, index) => (\r\n          <Link href={href} as={as} key={text}>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <item.Icon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={item.text} />\r\n            </ListItem>\r\n          </Link>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}